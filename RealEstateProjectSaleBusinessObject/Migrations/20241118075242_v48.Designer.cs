// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstateProjectSaleBusinessObject.BusinessObject;

#nullable disable

namespace RealEstateProjectSaleBusinessObject.Migrations
{
    [DbContext(typeof(RealEstateProjectSaleSystemDBContext))]
    [Migration("20241118075242_v48")]
    partial class v48
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Block", b =>
                {
                    b.Property<Guid>("BlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageBlock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("ZoneID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlockID");

                    b.HasIndex("ZoneID");

                    b.ToTable("Block", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", b =>
                {
                    b.Property<Guid>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookingFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("DepositedPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DepositedTimed")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentTemplateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OpeningForSaleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectCategoryDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DocumentTemplateID");

                    b.HasIndex("OpeningForSaleID");

                    b.HasIndex("ProjectCategoryDetailID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("StaffID");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PropertyID");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Contract", b =>
                {
                    b.Property<Guid>("ContractID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractDepositFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractSaleFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentTemplateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("date");

                    b.Property<Guid?>("PaymentProcessID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PriceSheetFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PromotionDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalPrice")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DocumentTemplateID");

                    b.HasIndex("PaymentProcessID");

                    b.HasIndex("PromotionDetailID");

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.ContractPaymentDetail", b =>
                {
                    b.Property<Guid>("ContractPaymentDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PaidValue")
                        .HasColumnType("float");

                    b.Property<double?>("PaidValueLate")
                        .HasColumnType("float");

                    b.Property<Guid?>("PaymentPolicyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentRate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Period")
                        .HasColumnType("date");

                    b.Property<string>("RemittanceOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ContractPaymentDetailID");

                    b.HasIndex("ContractID");

                    b.HasIndex("PaymentPolicyID");

                    b.ToTable("ContractPaymentDetail", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DateOfExpiry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfResidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceofOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Taxcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.HasIndex("AccountID");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.DocumentTemplate", b =>
                {
                    b.Property<Guid>("DocumentTemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("DocumentTemplateID");

                    b.ToTable("DocumentTemplate", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Floor", b =>
                {
                    b.Property<Guid>("FloorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlockID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageFloor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumFloor")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("FloorID");

                    b.HasIndex("BlockID");

                    b.ToTable("Floor", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Notification", b =>
                {
                    b.Property<Guid>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Subtiltle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.HasIndex("BookingID");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.OpenForSaleDetail", b =>
                {
                    b.Property<Guid>("OpeningForSaleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("OpeningForSaleID", "PropertyID");

                    b.HasIndex("PropertyID");

                    b.ToTable("OpenForSaleDetail", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.OpeningForSale", b =>
                {
                    b.Property<Guid>("OpeningForSaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectCategoryDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ReservationPrice")
                        .HasColumnType("float");

                    b.Property<string>("SaleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("OpeningForSaleID");

                    b.HasIndex("ProjectCategoryDetailID");

                    b.ToTable("OpeningForSale", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PanoramaImage", b =>
                {
                    b.Property<Guid>("PanoramaImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PanoramaImageID");

                    b.HasIndex("ProjectID");

                    b.ToTable("PanoramaImage", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Payment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PaymentID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentPolicy", b =>
                {
                    b.Property<Guid>("PaymentPolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LateDate")
                        .HasColumnType("int");

                    b.Property<string>("PaymentPolicyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PercentLate")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PaymentPolicyID");

                    b.ToTable("PaymentPolicy", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcess", b =>
                {
                    b.Property<Guid>("PaymentProcessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalesPolicyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PaymentProcessID");

                    b.HasIndex("SalesPolicyID");

                    b.ToTable("PaymentProcess", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcessDetail", b =>
                {
                    b.Property<Guid>("PaymentProcessDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DurationDate")
                        .HasColumnType("int");

                    b.Property<Guid>("PaymentProcessID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentStage")
                        .HasColumnType("int");

                    b.Property<float?>("Percentage")
                        .HasColumnType("real");

                    b.HasKey("PaymentProcessDetailID");

                    b.HasIndex("PaymentProcessID");

                    b.ToTable("PaymentProcessDetail", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Project", b =>
                {
                    b.Property<Guid>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingDensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Convenience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralContractor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandOver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Investor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentPolicyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalNumberOfApartment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.HasIndex("PaymentPolicyID");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.ProjectCategoryDetail", b =>
                {
                    b.Property<Guid>("ProjectCategoryDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectCategoryDetailID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("PropertyCategoryID");

                    b.ToTable("ProjectCategoryDetail", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Promotion", b =>
                {
                    b.Property<Guid>("PromotionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalesPolicyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PromotionID");

                    b.HasIndex("SalesPolicyID");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PromotionDetail", b =>
                {
                    b.Property<Guid>("PromotionDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PromotionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PromotionDetailID");

                    b.HasIndex("PromotionID");

                    b.HasIndex("PropertyTypeID");

                    b.ToTable("PromotionDetail", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Property", b =>
                {
                    b.Property<Guid>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlockID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FloorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("PriceSold")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProjectCategoryDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PropertyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UnitTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("View")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ZoneID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PropertyID");

                    b.HasIndex("BlockID");

                    b.HasIndex("FloorID");

                    b.HasIndex("ProjectCategoryDetailID");

                    b.HasIndex("UnitTypeID");

                    b.HasIndex("ZoneID");

                    b.ToTable("Property", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyCategory", b =>
                {
                    b.Property<Guid>("PropertyCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PropertyCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PropertyCategoryID");

                    b.ToTable("PropertyCategory", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyType", b =>
                {
                    b.Property<Guid>("PropertyTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PropertyTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PropertyTypeID");

                    b.HasIndex("PropertyCategoryID");

                    b.ToTable("PropertyType", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Salespolicy", b =>
                {
                    b.Property<Guid>("SalesPolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpressTime")
                        .HasColumnType("date");

                    b.Property<string>("PeopleApplied")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalesPolicyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("SalesPolicyID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Salespolicy", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Staff", b =>
                {
                    b.Property<Guid>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("date");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfresidence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placeoforigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Taxcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffID");

                    b.HasIndex("AccountID");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.UnitType", b =>
                {
                    b.Property<Guid>("UnitTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Basement")
                        .HasColumnType("int");

                    b.Property<int>("BathRoom")
                        .HasColumnType("int");

                    b.Property<int>("BedRoom")
                        .HasColumnType("int");

                    b.Property<double?>("GrossFloorArea")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KitchenRoom")
                        .HasColumnType("int");

                    b.Property<int>("LivingRoom")
                        .HasColumnType("int");

                    b.Property<double?>("NetFloorArea")
                        .HasColumnType("float");

                    b.Property<int?>("NumberFloor")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("UnitTypeID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("PropertyTypeID");

                    b.ToTable("UnitType", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Zone", b =>
                {
                    b.Property<Guid>("ZoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Zone", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Account", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Block", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Zone", "Zone")
                        .WithMany("Blocks")
                        .HasForeignKey("ZoneID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.DocumentTemplate", "DocumentTemplate")
                        .WithMany("Bookings")
                        .HasForeignKey("DocumentTemplateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.OpeningForSale", "OpeningForSale")
                        .WithMany("Bookings")
                        .HasForeignKey("OpeningForSaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.ProjectCategoryDetail", "ProjectCategoryDetail")
                        .WithMany("Bookings")
                        .HasForeignKey("ProjectCategoryDetailID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Property", "Property")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Staff", "Staff")
                        .WithMany("Bookings")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("DocumentTemplate");

                    b.Navigation("OpeningForSale");

                    b.Navigation("ProjectCategoryDetail");

                    b.Navigation("Property");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Comment", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Property", "Property")
                        .WithMany("Comments")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Contract", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", "Booking")
                        .WithMany("Contracts")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.DocumentTemplate", "DocumentTemplate")
                        .WithMany("Contracts")
                        .HasForeignKey("DocumentTemplateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcess", "PaymentProcess")
                        .WithMany("Contracts")
                        .HasForeignKey("PaymentProcessID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PromotionDetail", "PromotionDetail")
                        .WithMany("Contracts")
                        .HasForeignKey("PromotionDetailID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Booking");

                    b.Navigation("Customer");

                    b.Navigation("DocumentTemplate");

                    b.Navigation("PaymentProcess");

                    b.Navigation("PromotionDetail");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.ContractPaymentDetail", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Contract", "Contract")
                        .WithMany("ContractPaymentDetails")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentPolicy", "PaymentPolicy")
                        .WithMany("ContractPaymentDetails")
                        .HasForeignKey("PaymentPolicyID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Contract");

                    b.Navigation("PaymentPolicy");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Floor", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Block", "Block")
                        .WithMany("Floors")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Notification", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", "Booking")
                        .WithMany("Notifications")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.OpenForSaleDetail", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.OpeningForSale", "OpeningForSale")
                        .WithMany("OpenForSaleDetails")
                        .HasForeignKey("OpeningForSaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Property", "Property")
                        .WithMany("OpenForSaleDetails")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OpeningForSale");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.OpeningForSale", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.ProjectCategoryDetail", "ProjectCategoryDetail")
                        .WithMany("OpeningForSales")
                        .HasForeignKey("ProjectCategoryDetailID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProjectCategoryDetail");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PanoramaImage", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Project", "Project")
                        .WithMany("PanoramaImages")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Payment", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcess", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Salespolicy", "Salespolicy")
                        .WithMany("PaymentProcesses")
                        .HasForeignKey("SalesPolicyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Salespolicy");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcessDetail", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcess", "PaymentProcess")
                        .WithMany("PaymentProcessDetails")
                        .HasForeignKey("PaymentProcessID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PaymentProcess");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Project", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentPolicy", "PaymentPolicy")
                        .WithMany("Projects")
                        .HasForeignKey("PaymentPolicyID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PaymentPolicy");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.ProjectCategoryDetail", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Project", "Project")
                        .WithMany("ProjectCategoryDetails")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyCategory", "PropertyCategory")
                        .WithMany("ProjectCategoryDetails")
                        .HasForeignKey("PropertyCategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("PropertyCategory");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Promotion", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Salespolicy", "Salespolicy")
                        .WithMany("Promotions")
                        .HasForeignKey("SalesPolicyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Salespolicy");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PromotionDetail", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Promotion", "Promotion")
                        .WithMany("PromotionDetails")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyType", "PropertyType")
                        .WithMany("PromotionDetails")
                        .HasForeignKey("PropertyTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Property", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Block", "Block")
                        .WithMany("Properties")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Floor", "Floor")
                        .WithMany("Properties")
                        .HasForeignKey("FloorID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.ProjectCategoryDetail", "ProjectCategoryDetail")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectCategoryDetailID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.UnitType", "UnitType")
                        .WithMany("Properties")
                        .HasForeignKey("UnitTypeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Zone", "Zone")
                        .WithMany("Properties")
                        .HasForeignKey("ZoneID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Block");

                    b.Navigation("Floor");

                    b.Navigation("ProjectCategoryDetail");

                    b.Navigation("UnitType");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyType", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyCategory", "PropertyCategory")
                        .WithMany("PropertyTypes")
                        .HasForeignKey("PropertyCategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PropertyCategory");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Salespolicy", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Project", "Project")
                        .WithMany("Salespolicies")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Staff", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.UnitType", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Project", "Project")
                        .WithMany("UnitTypes")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyType", "PropertyType")
                        .WithMany("UnitTypes")
                        .HasForeignKey("PropertyTypeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Project");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Zone", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Project", "Project")
                        .WithMany("Zones")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Block", b =>
                {
                    b.Navigation("Floors");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Contract", b =>
                {
                    b.Navigation("ContractPaymentDetails");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Comments");

                    b.Navigation("Contracts");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.DocumentTemplate", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Floor", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.OpeningForSale", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("OpenForSaleDetails");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentPolicy", b =>
                {
                    b.Navigation("ContractPaymentDetails");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcess", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("PaymentProcessDetails");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Project", b =>
                {
                    b.Navigation("PanoramaImages");

                    b.Navigation("ProjectCategoryDetails");

                    b.Navigation("Salespolicies");

                    b.Navigation("UnitTypes");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.ProjectCategoryDetail", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("OpeningForSales");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Promotion", b =>
                {
                    b.Navigation("PromotionDetails");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PromotionDetail", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Property", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Comments");

                    b.Navigation("OpenForSaleDetails");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyCategory", b =>
                {
                    b.Navigation("ProjectCategoryDetails");

                    b.Navigation("PropertyTypes");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyType", b =>
                {
                    b.Navigation("PromotionDetails");

                    b.Navigation("UnitTypes");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Salespolicy", b =>
                {
                    b.Navigation("PaymentProcesses");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Staff", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.UnitType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Zone", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
